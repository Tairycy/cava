# Make rules for simulating in gem5.
#
# ALADDIN_HOME needs to be defined as an environment variable.
# The gem5 dependencies are listed as .cpp files for compatibility with gem5.
# To compile them with C code, we need to explicitly use gcc.

include common/Makefile.arch
.PHONY: gem5 gem5-cpu gem5-accel clean-gem5

# Signifies this binary is to be run under gem5.
CPPFLAGS += -DGEM5

ifeq ($(ARCH), EIGEN)
$(error Please use 'make eigen' to build the Eigen implementation for gem5)
endif
ifeq ($(ARCH), MONOLITHIC)
NATIVE_FULL_PATH_SRCS += $(SRC_DIR)/arch/monolithic.c
COMP = $(CC)
CFLAGS += -std=gnu99
else ifeq ($(ARCH), COMPOSABLE)
NATIVE_FULL_PATH_SRCS += $(SRC_DIR)/arch/composable.c
COMP = $(CC)
CFLAGS += -std=gnu99
else ifeq ($(ARCH), SMIV)
COMP = $(CXX)
GEM5_SIMD_CFLAGS = -msse3 -msse2 -mno-ssse3 -mno-sse4.1 -mno-sse4.2
CFLAGS += -std=gnu++11 $(GEM5_SIMD_CFLAGS)
CPPFLAGS += -I$(MKLDNNROOT)/include
NATIVE_FULL_PATH_SRCS += $(SRC_DIR)/arch/smiv.cpp
else ifeq ($(ARCH), SMV)
COMP = $(CXX)
GEM5_SIMD_CFLAGS = -msse3 -msse2 -mno-ssse3 -mno-sse4.1 -mno-sse4.2
CFLAGS += -Wno-psabi -std=gnu++11 $(GEM5_SIMD_CFLAGS)
CPPFLAGS += -I$(MKLDNNROOT)/include -DTRANSPOSE_WEIGHTS=1 -D__USE_F16C_ANYWAYS__
NATIVE_FULL_PATH_SRCS += $(SRC_DIR)/arch/smv.cpp
else
$(error "Unknown architecture $(ARCH)!")
endif

# MKL-DNN does not work with static linking, so don't compile any MKL code
# unless it's specifically enabled.
ifeq ($(USE_MKLDNN), 1)
CPPFLAGS += -DUSE_MKLDNN
NATIVE_FULL_PATH_SRCS += $(SRC_DIR)/core/mkl/activation_functions.cpp \
												 $(SRC_DIR)/core/mkl/batch_norm.cpp \
												 $(SRC_DIR)/core/mkl/pooling.cpp \
												 $(SRC_DIR)/utility/mkl/utility.cpp
LFLAGS += -L$(MKLDNNROOT)/lib -lmkldnn
else
CFLAGS += -static
LFLAGS += $(LIBM5THREADS)
endif


CFLAGS += -O3 -g $(BMARK_SPECIFIC_CFLAGS) -flax-vector-conversions
CPPFLAGS += -DDMA_MODE

##------------------##
## Build m5threads  ##
LIBM5THREADS = src/third_party/m5threads/libpthread.a
$(LIBM5THREADS):
	$(MAKE) -C src/third_party/m5threads
##------------------##

# Output names:
GEM5_CPU = $(BUILD_DIR)/$(EXEC)-gem5
GEM5_ACCEL = $(BUILD_DIR)/$(EXEC)-gem5-accel

# Debug flags.
gem5: DLEVEL=0
gem5-cpu: DLEVEL=0
gem5-accel: DLEVEL=0

# Disable some warnings.
gem5-cpu: CFLAGS+=-Wno-attributes
gem5-accel: CFLAGS+=-Wno-attributes

# Builds both standalone CPU version and the HW accelerated version.
gem5: gem5-cpu gem5-accel

# Builds the standalone CPU version only.
gem5-cpu: $(LIBM5THREADS) $(GEM5_CPU)

# Builds the gem5 version with HW acceleration turned on.
gem5-accel: $(LIBM5THREADS) $(GEM5_ACCEL)

$(GEM5_CPU): $(NATIVE_FULL_PATH_SRCS) $(GEM5_FULL_PATH_SRCS)
	@echo Building benchmark $(EXEC) for gem5.
	@mkdir -p $(BUILD_DIR)
	@$(COMP) $(CPPFLAGS) $(CFLAGS) -static $^ -o $@ $(LFLAGS)

$(GEM5_ACCEL): $(NATIVE_FULL_PATH_SRCS) $(GEM5_FULL_PATH_SRCS)
	@echo Building benchmark $(EXEC) for gem5 with HW acceleration.
	@mkdir -p $(BUILD_DIR)
	@$(COMP) $(CPPFLAGS) $(CFLAGS) -static -DGEM5_HARNESS $^ -o $@ $(LFLAGS)

clean-gem5:
	@echo Cleaning gem5 build products...
	@rm -rf $(BUILD_DIR)/*-gem5
	@rm -rf $(BUILD_DIR)/*-gem5-accel
