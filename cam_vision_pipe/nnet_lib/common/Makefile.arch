# Shared variables required across all Make targets.

SRC_DIR = src
BUILD_DIR = build
COMMON_DIR := $(CURRENT_DIR)
CURRENT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

CORE_SRCS = core/ref/activation_functions.c \
						core/ref/convolution.c \
						core/ref/matrix_multiply.c \
						core/ref/zeropad.c \
						core/ref/pooling.c \
						core/ref/batch_norm.c \
						core/ref/lookup_tables.c \
						core/smiv/smiv.c \
						core/smiv/convolution.c \
						core/smiv/convolution_simd.c \
						core/smiv/matrix_multiply.c \
						core/smiv/reduction.c \
						core/smiv/batch_norm.c \
						core/smiv/max_pooling_nhwc.c \
						core/smiv/average_pooling_nhwc.c \
						core/smiv/decompression.c \
						core/smv/activation_functions.c \
						core/smv/convolution.c \
						core/smv/convolution_simd.c \
						core/smv/matrix_multiply.c \
						core/smv/smv.c

UTILITY_SRCS = utility/init_data.c \
							 utility/utility.c \
							 utility/model_conf_params.c \
							 utility/read_model_conf.c \
							 utility/profiling.c \
							 utility/data_archive.c \
							 utility/data_archive_txt.c \
							 utility/data_archive_common.c \
							 utility/data_archive_bin.c \
							 utility/data_layout_conversion.c \
							 utility/compression.c \
							 utility/thread_pool.c

ARCH_SRCS = arch/common.c

EIGEN_SRCS = core/eigen/activation_functions.cpp \
						 core/eigen/flatten.cpp \
						 core/eigen/matrix_multiply.cpp \
						 core/eigen/pooling.cpp \
						 core/eigen/batch_norm.cpp \
						 core/eigen/convolution.cpp \
						 utility/eigen/init_data.cpp \
						 utility/eigen/utility.cpp

MKL_SRCS = core/mkl/convolution.cpp \
					 core/mkl/batch_norm.cpp \
					 core/mkl/matrix_multiply.cpp \
					 core/mkl/pooling.cpp \
					 core/mkl/activation_functions.cpp \
					 utility/mkl/utility.cpp

SMIV_ARCH_SRCS = arch/smiv/activation_functions.c \
								 arch/smiv/batch_norm.c \
								 arch/smiv/inner_product.c \
							 	 arch/smiv/convolution.c \
								 arch/smiv/decompression.c \
								 arch/smiv/dispatch_utils.c \
								 arch/smiv/pooling.c \
								 arch/smiv/utils.c

SMV_ARCH_SRCS = arch/smv/activation_functions.c \
						    arch/smv/batch_norm.c \
								arch/smv/convolution.c \
								arch/smv/convolution_wt.c \
								arch/smv/dma_copy.c \
								arch/smv/inner_product.c \
								arch/smv/pooling.c

NNET_FWD_MAIN = nnet_fwd.c
CPP_NNET_FWD_MAIN = nnet_fwd.cpp
CONFIG_H = config.h

SRCS = $(CORE_SRCS) $(UTILITY_SRCS) $(ARCH_SRCS)
GEM5_DMA_SRC = gem5/dma_interface.c
GEM5_SYS_SRCS = gem5/aladdin_sys_connection.cpp gem5/aladdin_sys_constants.cpp
GEM5_UTIL_SRCS = ../../util/m5/m5op_x86.S

ARCH ?= MONOLITHIC

ifeq ($(ARCH), SMIV)
EXEC = nnet-smiv
export WORKLOAD=smiv_inner_product_layer_hw,smiv_convolution_layer_hw,activation_fun_fxp,smiv_reduction_hw,smiv_batch_norm_layer_hw,smiv_pooling_layer_hw,smiv_decompress_packed_csr_hw
SRCS += $(NNET_FWD_MAIN) $(SMIV_ARCH_SRCS)
else ifeq ($(ARCH), SMV)
EXEC = nnet-smv
export WORKLOAD=smv_inner_product_layer_hw,smv_eltwise_hw,smv_convolution_layer_hw,activation_fun_fxp,smv_batch_norm_layer_hw,smv_pooling_layer_hw,smiv_decompress_packed_csr_hw,smv_dma_load_hw,smv_dma_store_hw
SRCS += $(NNET_FWD_MAIN) $(SMV_ARCH_SRCS) $(SMIV_ARCH_SRCS)
else ifeq	($(ARCH), COMPOSABLE)
EXEC = nnet-composable
export WORKLOAD=inner_product_layer_hw,convolution_layer_hw,activation_hw,batch_norm_layer_hw,max_pooling_hw,avg_pooling_hw
SRCS += $(NNET_FWD_MAIN)
else ifeq ($(ARCH), MONOLITHIC)
EXEC = nnet-monolithic
export WORKLOAD=nnet_fwd_hw
SRCS += $(NNET_FWD_MAIN)
else ifeq ($(ARCH), EIGEN)
EXEC = nnet-eigen
SRCS += $(CPP_NNET_FWD_MAIN)
else ifeq ($(ARCH), MKLDNN)
EXEC = nnet-mkl
SRCS += $(CPP_NNET_FWD_MAIN)
else
$(error "Unknown architecture $(ARCH)!")
endif

INCLUDES += -I$(ALADDIN_HOME)/../../include \
						-I$(ALADDIN_HOME) \
						-I$(ALADDIN_HOME)/gem5 \
						-I$(SRC_DIR) \
						-I$(SRC_DIR)/third_party/FP16/include

CPPFLAGS += -DARCHITECTURE=$(ARCH) $(INCLUDES)
ifneq ($(CONFUSE_ROOT),)
INCLUDES += -I$(CONFUSE_ROOT)/include
LFLAGS += -L$(CONFUSE_ROOT)/lib
endif
DLEVEL ?= 0

CFLAGS += -g \
					-Wall \
					-Wno-psabi \
					-Wno-unused-label \
					-Wno-unused-but-set-variable \
					-DDEBUG_LEVEL=$(DLEVEL)

BMARK_SPECIFIC_CFLAGS = -DDMA_INTERFACE_V3

NATIVE_FULL_PATH_SRCS = $(patsubst %, $(SRC_DIR)/%, $(SRCS))
GEM5_FULL_PATH_SRCS = $(patsubst %, $(ALADDIN_HOME)/%, $(GEM5_DMA_SRC) $(GEM5_SYS_SRCS) $(GEM5_UTIL_SRCS))

LFLAGS += -lm -lconfuse -lrt
